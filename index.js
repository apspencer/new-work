const yaml = require('js-yaml');
const fs   = require('fs');
const request = require('request');
const cheerio = require('cheerio');
const async = require('async');
const _ = require('lodash');

function readYAML(filename, cb) {
  fs.readFile(filename, 'utf8', (err, data) => {
    if (err) return cb(err, null);
    try {
      var obj = yaml.safeLoad(data);
      cb(null, obj);
    } catch (err) {
      cb(err, null)
    }
  });
}

function writeYAML(filename, data, opts, cb) {
  var cb = cb || opts;
  if (typeof opts === 'function' || !opts) opts = {};

  var preamble = opts.preamble || '';

  try {
    var text = preamble + yaml.safeDump(data);
    fs.writeFile(filename, text, 'utf8', cb);
  } catch (err) {
    cb(err);
  }
}

function fetch(url, cb) {
  request(url, (err, resp, html) => {
    if (err) return cb(err, null, null);
    var $ = cheerio.load(html);
    cb(null, new Date(resp.headers['last-modified']), $);
  });
}

function crawl(sites, cb) {
  async.mapLimit(sites, 10, (site, cb) => {
    fetch(site.url, (err, lastModified, $) => {
      if (err) return cb(err, null);
      if (site.selector) {
        site.content = $.html($(site.selector).first());
        cb(null, site);
      } else if (lastModified) {
        site.lastModified = lastModified;
        cb(null, site);
      } else {
        cb(new Error(`${site.url}: no 'last-modified' header, specify selector instead`), null)
      }
    });
  }, cb);
}

function diff(lock, sites) {
  for (var site of sites) {
    var baseline = _.find(lock, ['url', site.url]);
    if (site.selector && baseline && baseline.selector) {
      site.lastModified = (site.content !== baseline.content) ? new Date() : baseline.lastModified;
    } else if (!site.lastModified) {
      site.lastModified = new Date();
    }
  }
  return sites
}

function status(sites, lockfile, opts, cb) {
  var cb = cb || opts;
  if (typeof opts === 'function' || !opts) opts = {};

  var expiration = opts.expiration || (1000 * 60 * 60 * 24 * 7) ; // ms in one week

  readYAML(lockfile, (err, lock) => {
    if (err) return cb(err, null);
    lock = lock.sites;
    crawl(sites, (err, sites) => {
      if (err) return cb(err, null);
      sites = diff(lock, sites);
      writeYAML(lockfile, {sites: sites}, {
        preamble: "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# newwork lockfile v1\n\n"
      }, (err) => {
        if (err) return cb(err, null);
        for (var site of sites) {
          site.new = (site.lastModified.getTime() > ((new Date()).getTime() - expiration))
        }
        cb(null, sites.map((site) => { return _.pick(site, ['name', 'url', 'new'])}))
      })
    });
  })
}

readYAML('./list.yaml', (err, data) => {
  var sites = data.sites;
  status(sites, './list.lock', (err, sites) => {
    console.log(sites);
  })
})